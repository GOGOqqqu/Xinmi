1.变量
    使用var关键字声明
    语法结构：var 变量名 = 值
    变量可以重新赋值，并可以声明多个
    如果一个变量只是声明而没有赋值，结果返回一个undefined   ( js 保留字， 表达未定义)
    变量声明可以提前
    变量: 存储一个数据的空间的容器

    前端的主要组成部分：html css js
         html: 定义页面内容结构
         css：美化页面
                 一个CSS文件如果过大的话，加载会很慢，占用过大带宽，如何解决
                       	1、将CSS文件拆分多个CSS文件
	                2、压缩css
	                3、去取冗余的样式  
                                4、减少css选择器层级
         js(javascript)：实现页面的行为(动态效果)

2.调试脚本方法
    console.log(a);

3. 变量命名规范（面试题）
    //1.变量名可由 字母、数字、下划线、$组合, 并且不能以数字开头
    //2.变量名可以 汉字 、π 命名(不建议使用)
    变量名对字母大小写很敏感，要区分大小写

4.注释分为单行注释和多行注释
    单行注释  //   var p=0;  //
    多行注释  /*var a1 = 1;*/

5.数据类型可分为：原始数据类型，引用数据类型 两种
     原始数据类型: number(数值), string(字符串), boolean(布尔), undefined(未定义), null(空)
              number : 数字 
              string : 使用单引号或者双引号包裹的文本
              boolean: true,false ,用于条件判断
                        !: 取反, 返回一个boolean类型数据
                        !! 快速将任何数据转换为boolean类型
                        隐式类型转换：js会根据数据结果进行转换
                        不同类型相加，要把类型转化为相同的类型
              undefined : 未定义
              null: 空, 一般用于释放引用数据(释放内存空间), 不能使用typeof判断null
              js有六个假值: 0, '', null, undefined, NaN, false, 其余都是真值

     引用数据类型: array(数组), function(函数), object(对象)
              array: 数组, 不能使用typeof判断array
              function: 函数
              object: 对象, 不能使用typeof判断object
6.运算符
     算术运算符: + - * /
     余数运算符: %, 读作取余(模)  3 % 2 = 1
     自增自减
           自增: 自身加1, 不管++在前还是在后, 始终加1
                   ++在前: 先自身加1, 再参与其他运算, ++在后, 参与其他运算, 再自身加1
           自减: 自身减1, 不管--在前还是在后, 始终减1
                   --在前: 先自身减1, 再参与其他运算, --在后, 参与其他运算, 再自身减1
              
    比较运算符
          比较运算符, 返回一个boolean类型数据  
          比如 ： > < >= <= != == !== ===
          ==: 值相等, 数据类型可以不同
          ===: 值相等, 数据类型必须相同
          !=: 不等, 值不等
          !==: 不全等, 值不等, 或者数据类型不同
    赋值运算符: = += -= *= /= %=
        将x,y两值互换
                  第一种方式, 可声明第三个变量辅助
                          var z = y; 
                          y = x; 
                          x = z; 
                  第二种方式, 不允许声明第三个变量辅助
                          var u = 1;
                          var O = 2;
                          u += O; 
                          O = u - O; 
                          u -= O
    
    布尔运算符
              &&: 逻辑且, 所有条件为真，结果才是真, 只要有一个结果为false, 则返回false
              ||  : 逻辑或, 所有条件为假，结果才是假, 只要有一个结果为true, 则返回true
    三目运算
             语法结构 ==> 条件 ? 条件为真执行 : 条件为假执行
7.内置互动
    alert(): 警告框, 没有返回值(undefined)
    prompt(): 输入框
    confirm(): 确认框, 返回一个布尔值
8.number 数值(重点)
       toFixed(n): 保留小数位, n: 小数位, 返回一个字符串
       NaN: 不是一个数字, 但是属于number类型
                NaN跟任何数据相比较, 均返回false, 包括本身
       tostring()  将数字转换成字符串, 
       isNaN(): 判断一个数据是否为NaN
       Number(): 将数据转换为number类型数据
       isFinite(): 判断是一个数子是否有效(有穷), 返回一个boolean类型数据
                      如果参数是 NaN，正无穷大或者负无穷大，会返回 false，其他返回 true ,
       Infinity: 表示无穷(无效)
       Number.MAX_VALUE    js数值最大值
       Number.MIN_VALUE,   js数值最小值
       parseInt() 将字符串转为整数。参数非字符串，先将其转换为字符串在进行转化，依次解析，直到无法转 
       parseFloat() 取浮点数不了转换数值，返回NaN; 将数据转换为浮点数

 9. if else(重点)  语句在条件为 true 时执行代码，在条件为 false 时执行其他代码。
       if: 条件语句
       语法结构
      if (条件1) {
        当条件1为真执行
      } else if (条件2) {
        当条件2为真执行
      } else if (条件3) {
        当条件3为真执行
      } ... else {
        以上条件都不成立执行
       }

10.switch case
    语法结构
    switch (表达式) {
      case 值1:
        当 值1 == 表达式 执行;

        case 值2:
        当 值2 == 表达式 执行;

        ...

        default:
          以上值都不等于表达式, 执行
    }
         使用 switch case 判断分数等级
    1、先将100分制转10分制
    2、将输入的分数取整 ==> 0 1 2 3 4 5 6 7 8 9 10

11 .while

     while循环
    语法结构
    while (条件) {
      循环体
      当条件为真执行循环体
    }

12.do while
      do while 循环
    语法结构
    do {
      第一次不管条件是否为真都执行, 从第二次开始条件为真执行
      循环体
    } while (条件)
     

    //while循环嵌套
    var c1 = 0;
    //外层循环
    while (c1 < 3) {
      c1++;
      console.log('c1 ==> ', c1);

      var c2 = 0;

      //内层循环
      while (c2 < 2) {
        c2++;
        console.log('c2 ==> ', c2);
      }

    }

13.for(重点)
        for循环(重点, 开发常用的循环)
    语法结构
    for (语句1; 语句2; 语句3) {
      //循环体
      //当语句2满足条件执行循环体
    }


14.for嵌套(重点难点)
        for (var row = 0; row < 5; row++) {
      for (var col = 0; col < 5; col++) {
        console.log('row:col ==> ', row + ':' + col);
      }
    }


15.   continue: 跳过本轮循环, 直接进入下一轮循环, 只有在循环体才能使用continue
16.   break: 打断循环, 可在循环体和switch case使用break

 17.try catch finally
      try catch finally: 用于捕获错误
       try {
      var a = c + 1;
      console.log('a ==> ', a);
    } catch (err) {
      //只要try语句块的代码错误, 就会执行catch
      //err: try语句块抛出的错误
      console.log('err ==> ', err);
    } finally {
      //不管try语句块是否出现错误, 始终执行
      console.log('finally执行');
    }
    if (true) {
      console.log('我被执行了');
    }


18. 函数 
    函数是一段可以直接被另一段程序或代码引用的程序或代码；
    函数定义    使用function关键字 + 函数名
   函数有三种；
       
    1.语法结构(常用函数的定义方式)
    function 函数名() {
      函数体
    }
   
   2.函数表达式(匿名函数)
     语法结构(常用函数的定义方式)
    var fn = function () {
      console.log('我是一个匿名函数');
      if (true) {
      }
    }
   
   3.使用Function构造函数创建(不建议使用)
    语法结构
    var gn = new Function("console.log('我是Function创建的函数');");
    console.log('gn ==> ', gn);
   
    函数调用方式：
        1.函数名()
         a();

        2.匿名函数自调 
            匿名函数 立即调用函数
            常用的方式
               (function () {
                   console.log('匿名函数自调1');
              })()
                   +function () {
                 console.log('匿名函数自调2');
               }()
           
               !function () {
                 console.log('匿名函数自调3');
               }()
           
               -function () {
                 console.log('匿名函数自调4');
               }()
           
               *function () {
                 console.log('匿名函数自调5');03
               }()
           
               /function () {
                 console.log('匿名函数自调6');
               }()
    函数声明提前：
           foo();
           function foo() {
             console.log('我被调用了1111');
           }
     函数参数：
          参数的使用场景, 当函数体的变量值不确定时, 可以使用参数代替
          参数分类
          形参(形式参数, 抽象的): 函数在定义时传递的参数
          实参(实际参数, 具体的): 函数在调用时传递的参数
          当函数的形参没有对应的值, 则该参数为undefined；
    return: 函数返回值
        只能在函数体中使用, 函数体一旦执行return, 就会终止函数执行
        return的使用场景: 在函数体中某处终止函数执行 或者 将函数体的结果返回给外部使用
    arguments: 实参个数对象
        使用场景：当形参个数不确定时, 可使用arguments
        只能在函数体使用arguments
19.函数递归
    //函数递归: 函数内部调用函数本身
    //用法类似循环
    var n = 0;
    function fn() {
      if (n === 5) {
        return;
      }
      n++;
      console.log('函数执行' + n + '次');
      fn();
    }
    fn();
20.函数封装
    使用场景：如果程序多处出现相同或者相似的代码, 可以使用函数封装这部分的代码，以便复用
21. 作用域
    //全局作用域, 任何地方都可以访问

    //函数作用域(局部作用域)
          //外部无法访问函数内部的局部变量
    //作用域链: 当访问变量的作用域时, 不断寻找变量所形成的链式结构的作用域

